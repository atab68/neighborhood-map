{"version":3,"sources":["components/NoMapDiv.js","components/MapDiv.js","components/ListItems.js","App.js","serviceWorker.js","index.js"],"names":["NoMapDiv","state","show","timeout","componentDidMount","window","setTimeout","_this","showMessage","setState","componentWillUnmount","clearTimeout","render","react_default","a","createElement","Component","client_id","secret_id","v","MapDiv","map","markers","markerProps","activeMarker","activeMarkerProps","showInfoWindow","componentWillReceiveProps","props","firstDrop","length","locations","closeInfoWindow","updateMarkers","selectedIndex","onMarkerClick","mapReady","setAnimation","getBusnInfo","data","response","venues","filter","item","name","includes","marker","e","url","concat","position","lat","lng","headers","Headers","request","Request","method","fetch","then","json","result","restaurant","Object","objectSpread","foursquare","id","images","photos","google","maps","Animation","BOUNCE","catch","error","console","log","forEach","setMap","location","index","markProps","key","pos","push","animation","fisrtDrop","DROP","Marker","addListener","center","lon","actmarkProps","dist","role","aria-label","onReady","zoom","style","width","height","initialCenter","onClick","visible","onClose","href","alt","src","items","prefix","suffix","GoogleApiWrapper","apiKey","LoadingContainer","ListItems","open","query","styles","list","padding","noBullets","listStyleType","fullList","listItem","marginBottom","listLink","background","border","color","filterEntry","margin","updateQuery","newQuery","filterLocations","Drawer_default","toggleDrawer","type","placeholder","onChange","target","value","clickListItem","App","all","filtered","menuButton","marginLeft","marginRight","left","top","hide","display","header","marginTop","toLowerCase","className","components_MapDiv","components_ListItems","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","src_App_0","document","getElementById","URL","process","origin","addEventListener","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"6MAsCeA,6MAnCXC,MAAQ,CACJC,MAAM,EACNC,QAAS,QAGbC,kBAAoB,WAChB,IAAID,EAAUE,OAAOC,WAAWC,EAAKC,YAAa,KAClDD,EAAKE,SAAS,CAACN,eAGnBO,qBAAuB,WACnBL,OAAOM,aAAaJ,EAAKN,MAAME,YAGnCK,YAAc,WACVD,EAAKE,SAAS,CAACP,MAAM,OAGzBU,OAAS,WACL,OACGC,EAAAC,EAAAC,cAAA,WACMR,EAAKN,MAAMC,KAEJW,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,yDAILF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,yBATjB,mCArBYC,aCGjBC,EAAY,mDACZC,EAAY,mDACZC,EAAI,WAEJC,6MACFnB,MAAQ,CACJoB,IAAK,KACLC,QAAS,GACTC,YAAa,GACbC,aAAc,KACdC,kBAAmB,KACnBC,gBAAgB,KAIpBC,0BAA4B,SAACC,GAIzB,GAHArB,EAAKE,SAAS,CAACoB,WAAW,IAGtBtB,EAAKN,MAAMqB,QAAQQ,SAAWF,EAAMG,UAAUD,OAK9C,OAJAvB,EAAKyB,kBACLzB,EAAK0B,cAAcL,EAAMG,gBACzBxB,EAAKE,SAAS,CAACe,aAAc,SAM5BI,EAAMM,eAAkB3B,EAAKN,MAAMuB,cACnCjB,EAAKN,MAAMqB,QAAQM,EAAMM,iBAAmB3B,EAAKN,MAAMuB,eACxDjB,EAAKyB,kBAImB,OAAxBJ,EAAMM,eAA0D,qBAAzBN,EAAMM,eAKjD3B,EAAK4B,cAAc5B,EAAKN,MAAMsB,YAAYK,EAAMM,eAAgB3B,EAAKN,MAAMqB,QAAQM,EAAMM,mBAG7FE,SAAW,SAACR,EAAOP,GAEfd,EAAKE,SAAS,CAACY,QACfd,EAAK0B,cAAc1B,EAAKqB,MAAMG,cAGlCC,gBAAkB,WAEdzB,EAAKN,MAAMuB,cAAgBjB,EACtBN,MACAuB,aACAa,aAAa,MAClB9B,EAAKE,SAAS,CAACiB,gBAAgB,EAAOF,aAAc,KAAMC,kBAAmB,UAGjFa,YAAc,SAACV,EAAOW,GAElB,OAAOA,EACFC,SACAC,OACAC,OAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAKC,SAASjB,EAAMgB,OAAShB,EAAMgB,KAAKC,SAASF,EAAKC,WAGnFT,cAAgB,SAACP,EAAOkB,EAAQC,GAC5BxC,EAAKyB,kBAGL,IAQIP,EARAuB,EAAG,yDAAAC,OAA4DhC,EAA5D,mBAAAgC,OAAuF/B,EAAvF,OAAA+B,OAAsG9B,EAAtG,mBAAA8B,OAAyHrB,EAAMsB,SAASC,IAAxI,KAAAF,OAA+IrB,EAAMsB,SAASE,IAA9J,cACHC,EAAU,IAAIC,QACdC,EAAU,IAAIC,QAAQR,EAAK,CAC3BS,OAAQ,MACRJ,YAKJK,MAAMH,GACDI,KAAK,SAAAnB,GAAQ,OAAIA,EAASoB,SAC1BD,KAAK,SAAAE,GAEF,IAAIC,EAAavD,EAAK+B,YAAYV,EAAOiC,GAOzC,IANApC,EAAiBsC,OAAAC,EAAA,EAAAD,CAAA,GACVnC,EADU,CAEbqC,WAAYH,EAAW,MAILG,WAAY,CAC9B,IAAIjB,EAAG,wCAAAC,OAA2Ca,EAAW,GAAGI,GAAzD,sBAAAjB,OAAgFhC,EAAhF,mBAAAgC,OAA2G/B,EAA3G,OAAA+B,OAA0H9B,GACjIuC,MAAMV,GACDW,KAAK,SAAAnB,GAAQ,OAAIA,EAASoB,SAC1BD,KAAK,SAAAE,GACFpC,EAAiBsC,OAAAC,EAAA,EAAAD,CAAA,GACVtC,EADU,CAEb0C,OAAQN,EAAOrB,SAAS4B,SAExB7D,EAAKN,MAAMuB,cACXjB,EAAKN,MAAMuB,aAAaa,aAAa,MACzCS,EAAOT,aAAa9B,EAAKqB,MAAMyC,OAAOC,KAAKC,UAAUC,QACrDjE,EAAKE,SAAS,CAACiB,gBAAgB,EAAMF,aAAcsB,EAAQrB,wBAC5DgD,MAAM,SAACC,GACNC,QAAQC,IAAI,8BAA+BF,UAGnD5B,EAAOT,aAAa9B,EAAKqB,MAAMyC,OAAOC,KAAKC,UAAUC,QACrDjE,EAAKE,SAAS,CAACiB,gBAAgB,EAAMF,aAAcsB,EAAQrB,2BAM3EQ,cAAgB,SAACF,GACb,GAAKA,EAAL,CAEAxB,EACKN,MACAqB,QACAuD,QAAQ,SAAA/B,GAAM,OAAIA,EAAOgC,OAAO,QAGrC,IAAIvD,EAAc,GACdD,EAAUS,EAAUV,IAAI,SAAC0D,EAAUC,GACnC,IAAIC,EAAY,CACZC,IAAKF,EACLA,QACApC,KAAMmC,EAASnC,KACfM,SAAU6B,EAASI,IACnBnC,IAAK+B,EAAS/B,KAElBzB,EAAY6D,KAAKH,GAEjB,IAAII,EAAY9E,EAAKN,MAAMqF,UAAY/E,EAAKqB,MAAMyC,OAAOC,KAAKC,UAAUgB,KAAO,KAC3EzC,EAAS,IAAIvC,EACZqB,MACAyC,OACAC,KACAkB,OAAO,CAACtC,SAAU6B,EAASI,IAAK9D,IAAKd,EAAKN,MAAMoB,IAAKgE,cAI1D,OAHAvC,EAAO2C,YAAY,QAAS,WACxBlF,EAAK4B,cAAc8C,EAAWnC,EAAQ,QAEnCA,IAGXvC,EAAKE,SAAS,CAACa,UAASC,oBAG5BX,OAAS,WACL,IAIM8E,EAAS,CACXvC,IAAK5C,EAAKqB,MAAMuB,IAChBC,IAAK7C,EAAKqB,MAAM+D,KAEhBC,EAAerF,EAAKN,MAAMwB,kBAE9B,OACIZ,EAAAC,EAAAC,cAAC8E,EAAA,IAAD,CACIC,KAAK,cACLC,aAAW,MACXC,QAASzF,EAAK6B,SACdiC,OAAQ9D,EAAKqB,MAAMyC,OACnB4B,KAAM1F,EAAKqB,MAAMqE,KACjBC,MAjBM,CACVC,MAAO,OACPC,OAAQ,SAgBJC,cAAeX,EACfY,QAAS/F,EAAKyB,iBACdnB,EAAAC,EAAAC,cAAC8E,EAAA,WAAD,CACI/C,OAAQvC,EAAKN,MAAMuB,aACnB+E,QAAShG,EAAKN,MAAMyB,eACpB8E,QAASjG,EAAKyB,iBACdnB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAK6E,GAAgBA,EAAahD,MACjCgD,GAAgBA,EAAa5C,IAEtBnC,EAAAC,EAAAC,cAAA,KAAG0F,KAAMb,EAAa5C,KAAtB,eAEF,GACL4C,GAAgBA,EAAazB,OAEtBtD,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,OACD2F,IAAKd,EAAahD,KAAO,gBACzB+D,IAAKf,EAAazB,OAAOyC,MAAM,GAAGC,OAAS,UAAYjB,EAAazB,OAAOyC,MAAM,GAAGE,SACpFjG,EAAAC,EAAAC,cAAA,mCAGN,oCAxLTC,aAiMN+F,6BAAiB,CAACC,OAtMjB,0CAsMkCC,iBAAkBjH,GAArD+G,CAAgE3F,oBC9HhE8F,6MAxEXjH,MAAQ,CACJkH,MAAM,EACNC,MAAO,MAGXC,OAAS,CACLC,KAAM,CACFnB,MAAO,QACPoB,QAAS,gBAEbC,UAAW,CACPC,cAAe,OACfF,QAAS,GAEbG,SAAU,CACNvB,MAAO,QAEXwB,SAAU,CACNC,aAAc,QAElBC,SAAU,CACNC,WAAY,cACZC,OAAQ,OACRC,MAAO,SAEXC,YAAa,CACTF,OAAQ,iBACRR,QAAS,MACTW,OAAQ,gBACR/B,MAAO,WAIfgC,YAAc,SAACC,GAEX7H,EAAKE,SAAS,CAAE2G,MAAOgB,IACvB7H,EAAKqB,MAAMyG,gBAAgBD,MAG/BxH,OAAS,WACL,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACuH,EAAAxH,EAAD,CAAQqG,KAAM5G,EAAKqB,MAAMuF,KAAMX,QAASjG,EAAKqB,MAAM2G,cAC/C1H,EAAAC,EAAAC,cAAA,OAAKmF,MAAO3F,EAAK8G,OAAOC,MACpBzG,EAAAC,EAAAC,cAAA,SACImF,MAAO3F,EAAK8G,OAAOY,YACnBO,KAAK,OACLC,YAAY,cACZ7F,KAAK,SACLmD,aAAW,SACX2C,SAAU,SAAA3F,GAAC,OAAIxC,EACV4H,YAAYpF,EAAE4F,OAAOC,QAC1BA,MAAOrI,EAAKN,MAAMmH,QACtBvG,EAAAC,EAAAC,cAAA,MAAImF,MAAO3F,EAAK8G,OAAOG,WAClBjH,EAAKqB,MAAMG,WAAaxB,EACpBqB,MACAG,UACAV,IAAI,SAAC0D,EAAUC,GACZ,OACInE,EAAAC,EAAAC,cAAA,MAAImF,MAAO3F,EAAK8G,OAAOM,SAAUzC,IAAKF,GAClCnE,EAAAC,EAAAC,cAAA,UAAQmF,MAAO3F,EAAK8G,OAAOQ,SAAU3C,IAAKF,EAAOsB,QAAS,SAAAvD,GAAC,OAAIxC,EAAKqB,MAAMiH,cAAc7D,KAASD,EAASnC,2CA7D9H5B,aC2FT8H,6MAvFb7I,MAAQ,CACNkD,IAAK,QACLwC,KAAM,QACNM,KAAM,GACN8C,IAAKhH,EACLiH,SAAU,KACV7B,MAAM,KAGRE,OAAS,CACP4B,WAAY,CACVC,WAAY,GACZC,YAAa,GACbjG,SAAU,WACVkG,KAAM,GACNC,IAAK,GACLvB,WAAY,UACZP,QAAS,IAEX+B,KAAM,CACJC,QAAS,QAEXC,OAAQ,CACNC,UAAW,UAIfrJ,kBAAoB,WAClBG,EAAKE,SAALsD,OAAAC,EAAA,EAAAD,CAAA,GACKxD,EAAKN,MADV,CAEE+I,SAAUzI,EAAK8H,gBAAgB9H,EAAKN,MAAM8I,IAAK,UAInDR,aAAe,WAEbhI,EAAKE,SAAS,CACZ0G,MAAO5G,EAAKN,MAAMkH,UAItBgB,YAAc,SAACf,GAEb7G,EAAKE,SAALsD,OAAAC,EAAA,EAAAD,CAAA,GACKxD,EAAKN,MADV,CAEEiC,cAAe,KACf8G,SAAUzI,EAAK8H,gBAAgB9H,EAAKN,MAAM8I,IAAK3B,SAInDiB,gBAAkB,SAACtG,EAAWqF,GAE5B,OAAOrF,EAAUW,OAAO,SAAAqC,GAAQ,OAAIA,EAASnC,KAAK8G,cAAc7G,SAASuE,EAAMsC,oBAGjFb,cAAgB,SAAC7D,GACfzE,EAAKE,SAAS,CAAEyB,cAAe8C,EAAOmC,MAAO5G,EAAKN,MAAMkH,UAG1DvG,OAAS,WACP,OACEC,EAAAC,EAAAC,cAAA,OAAM+E,KAAK,OAAO6D,UAAU,OAC1B9I,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQuF,QAAS/F,EAAKgI,aAAcrC,MAAO3F,EAAK8G,OAAO4B,YACrDpI,EAAAC,EAAAC,cAAA,KAAG4I,UAAU,gBAEf9I,EAAAC,EAAAC,cAAA,6CAEFF,EAAAC,EAAAC,cAAC6I,EAAD,CACEzG,IAAK5C,EAAKN,MAAMkD,IAChBwC,IAAKpF,EAAKN,MAAM0F,IAChBM,KAAM1F,EAAKN,MAAMgG,KACjBlE,UAAWxB,EAAKN,MAAM+I,SACtB9G,cAAe3B,EAAKN,MAAMiC,cAC1B2G,cAAetI,EAAKsI,gBACtBhI,EAAAC,EAAAC,cAAC8I,EAAD,CACE9H,UAAWxB,EAAKN,MAAM+I,SACtB7B,KAAM5G,EAAKN,MAAMkH,KACjBoB,aAAchI,EAAKgI,aACnBF,gBAAiB9H,EAAK4H,YACtBU,cAAetI,EAAKsI,+CAjFZ7H,aCMZ8I,EAAcC,QACW,cAA7B1J,OAAO0E,SAASiF,UAEe,UAA7B3J,OAAO0E,SAASiF,UAEhB3J,OAAO0E,SAASiF,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTxG,KAAK,SAAA6G,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBzK,QACfoK,UAAUC,cAAcO,YAI1BlG,QAAQC,IACN,gHAKEwF,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlB7F,QAAQC,IAAI,sCAGRwF,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,SAO5B/F,MAAM,SAAAC,GACLC,QAAQD,MAAM,4CAA6CA,KCvFjEsG,IAASpK,OAAOC,EAAAC,EAAAC,cAACkK,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBf,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIe,IAAIC,oBAAwBhL,OAAO0E,UAC3CuG,SAAWjL,OAAO0E,SAASuG,OAIvC,OAGFjL,OAAOkL,iBAAiB,OAAQ,WAC9B,IAAMpB,EAAK,GAAAlH,OAAMoI,oBAAN,sBAEPvB,GA6DV,SAAiCK,EAAOC,GAEtC1G,MAAMyG,GACHxG,KAAK,SAAAnB,GAGkB,MAApBA,EAASgJ,SACuD,IAAhEhJ,EAASa,QAAQoI,IAAI,gBAAgBC,QAAQ,cAG7CrB,UAAUC,cAAcqB,MAAMhI,KAAK,SAAA6G,GACjCA,EAAaoB,aAAajI,KAAK,WAC7BtD,OAAO0E,SAAS8G,aAKpB3B,EAAgBC,EAAOC,KAG1B3F,MAAM,WACLE,QAAQC,IACN,mEAjFAkH,CAAwB3B,EAAOC,GAI/BC,UAAUC,cAAcqB,MAAMhI,KAAK,WACjCgB,QAAQC,IACN,+GAMJsF,EAAgBC,EAAOC,MCvC/BE","file":"static/js/main.7aa71f8d.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass NoMapDiv extends Component {\n    state = {\n        show: false,\n        timeout: null\n    }\n\n    componentDidMount = () => {\n        let timeout = window.setTimeout(this.showMessage, 900);\n        this.setState({timeout});\n    }\n\n    componentWillUnmount = () => {\n        window.clearTimeout(this.state.timeout);\n    }\n\n    showMessage = () => {\n        this.setState({show: true});\n    }\n\n    render = () => {\n        return (\n           <div>\n                {this.state.show\n                    ? (\n                        <div>\n                            <h1>Error loading map</h1>\n                            < p >\n                                Network error.Try again when you're online.</p>\n                        </div>\n                    )\n                    : (<div><h1>Loading...</h1></div>)\n            } </div>\n        )\n    }\n}\n\nexport default NoMapDiv;","import React, {Component} from 'react';\nimport {Map, InfoWindow, GoogleApiWrapper} from 'google-maps-react';\nimport NoMapDiv from './NoMapDiv';\n\nconst map_key = \"AIzaSyDmQ4LFFMlYQsyIT1GA-G0SRLqTfw5-FPE\";\nconst client_id = \"5MCQM5H0HKJBWG1G5XPM3YL4O1AOCQREKTAQOPAT4XG5HHCM\";\nconst secret_id = \"AWTTQMFEIKVGKYWLWAUIWHN2JPVA1PCSXF23PUDXWXEVA12V\";\nconst v = \"20181030\";\n\nclass MapDiv extends Component {\n    state = {\n        map: null,\n        markers: [],\n        markerProps: [],\n        activeMarker: null,\n        activeMarkerProps: null,\n        showInfoWindow: false\n    };\n\n\n    componentWillReceiveProps = (props) => {\n        this.setState({firstDrop: false});\n\n        // Change in the number of locations, so update the markers\n        if (this.state.markers.length !== props.locations.length) {\n            this.closeInfoWindow();\n            this.updateMarkers(props.locations);\n            this.setState({activeMarker: null});\n\n            return;\n        }\n\n        // The selected item is not the same as the active marker, so close the info window\n        if (!props.selectedIndex || (this.state.activeMarker && \n            (this.state.markers[props.selectedIndex] !== this.state.activeMarker))) {\n            this.closeInfoWindow();\n        }\n\n        // Make sure there's a selected index\n        if (props.selectedIndex === null || typeof(props.selectedIndex) === \"undefined\") {\n            return;\n        };\n\n        // Treat the marker as clicked\n        this.onMarkerClick(this.state.markerProps[props.selectedIndex], this.state.markers[props.selectedIndex]);\n    }\n\n    mapReady = (props, map) => {\n        // Save the map reference in state and prepare the location markers\n        this.setState({map});\n        this.updateMarkers(this.props.locations);\n    }\n\n    closeInfoWindow = () => {\n        // Disable any active marker animation\n        this.state.activeMarker && this\n            .state\n            .activeMarker\n            .setAnimation(null);\n        this.setState({showInfoWindow: false, activeMarker: null, activeMarkerProps: null});\n    }\n\n    getBusnInfo = (props, data) => {\n        // Look for matching restaurant API in Foursquare compared to what we already know\n        return data\n            .response\n            .venues\n            .filter(item => item.name.includes(props.name) || props.name.includes(item.name));\n    }\n\n    onMarkerClick = (props, marker, e) => {\n        this.closeInfoWindow();\n\n        // Fetch the Foursquare API for the selected restaurant\n        let url = `https://api.foursquare.com/v2/venues/search?client_id=${client_id}&client_secret=${secret_id}&v=${v}&radius=100&ll=${props.position.lat},${props.position.lng}&llAcc=100`;\n        let headers = new Headers();\n        let request = new Request(url, {\n            method: 'GET',\n            headers\n        });\n\n        // Create  active marker props\n        let activeMarkerProps;\n        fetch(request)\n            .then(response => response.json())\n            .then(result => {\n                // Get just the business reference for the restaurant we want from the Foursquare return\n                let restaurant = this.getBusnInfo(props, result);\n                activeMarkerProps = {\n                    ...props,\n                    foursquare: restaurant[0]\n                };\n\n                // Get the list of images for the restaurant if we got Foursquare API, or just finishing setting state with the API we have\n                if (activeMarkerProps.foursquare) {\n                    let url = `https://api.foursquare.com/v2/venues/${restaurant[0].id}/photos?client_id=${client_id}&client_secret=${secret_id}&v=${v}`;\n                    fetch(url)\n                        .then(response => response.json())\n                        .then(result => {\n                            activeMarkerProps = {\n                                ...activeMarkerProps,\n                                images: result.response.photos\n                            };\n                            if (this.state.activeMarker) \n                                this.state.activeMarker.setAnimation(null);\n                            marker.setAnimation(this.props.google.maps.Animation.BOUNCE);\n                            this.setState({showInfoWindow: true, activeMarker: marker, activeMarkerProps});\n                        }).catch((error) => {\n                            console.log('Can not load foursquare API', error);\n                    })\n                } else {\n                    marker.setAnimation(this.props.google.maps.Animation.BOUNCE);\n                    this.setState({showInfoWindow: true, activeMarker: marker, activeMarkerProps});\n                }\n            })\n    }\n\n    //Create updateMarkers function\n    updateMarkers = (locations) => {\n        if (!locations) \n            return;\n        this\n            .state\n            .markers\n            .forEach(marker => marker.setMap(null));\n\n\n        let markerProps = [];\n        let markers = locations.map((location, index) => {\n            let markProps = {\n                key: index,\n                index,\n                name: location.name,\n                position: location.pos,\n                url: location.url\n            };\n            markerProps.push(markProps);\n\n            let animation = this.state.fisrtDrop ? this.props.google.maps.Animation.DROP : null;\n            let marker = new this\n                .props\n                .google\n                .maps\n                .Marker({position: location.pos, map: this.state.map, animation});\n            marker.addListener('click', () => {\n                this.onMarkerClick(markProps, marker, null);\n            });\n            return marker;\n        })\n\n        this.setState({markers, markerProps});\n    }\n\n    render = () => {\n        const style = {\n            width: '100%',\n            height: '100vh'\n        }\n        const center = {\n            lat: this.props.lat,\n            lng: this.props.lon\n        }\n        let actmarkProps = this.state.activeMarkerProps;\n\n        return (\n            <Map\n                role=\"application\"\n                aria-label=\"map\"\n                onReady={this.mapReady}\n                google={this.props.google}\n                zoom={this.props.zoom}\n                style={style}\n                initialCenter={center}\n                onClick={this.closeInfoWindow}>\n                <InfoWindow\n                    marker={this.state.activeMarker}\n                    visible={this.state.showInfoWindow}\n                    onClose={this.closeInfoWindow}>\n                    <div>\n                        <h3>{actmarkProps && actmarkProps.name}</h3>\n                        {actmarkProps && actmarkProps.url\n                            ? (\n                                <a href={actmarkProps.url}>See website</a>\n                            )\n                            : \"\"}\n                        {actmarkProps && actmarkProps.images\n                            ? (\n                                <div><img\n                                    alt={actmarkProps.name + \" food picture\"}\n                                    src={actmarkProps.images.items[0].prefix + \"100x100\" + actmarkProps.images.items[0].suffix}/>\n                                    <p>Image from Foursquare</p>\n                                </div>\n                            )\n                            : \"\"\n                        }\n                    </div>\n                </InfoWindow>\n            </Map>\n        )\n    }\n}\n\nexport default GoogleApiWrapper({apiKey: map_key, LoadingContainer: NoMapDiv})(MapDiv)\n","import React, { Component } from 'react';\nimport Drawer from '@material-ui/core/Drawer';\n\nclass ListItems extends Component {\n    state = {\n        open: false,\n        query: \"\"\n    }\n\n    styles = {\n        list: {\n            width: \"250px\",\n            padding: \"0px 15px 0px\"\n        },\n        noBullets: {\n            listStyleType: \"none\",\n            padding: 0\n        },\n        fullList: {\n            width: 'auto'\n        },\n        listItem: {\n            marginBottom: \"15px\"\n        },\n        listLink: {\n            background: \"transparent\",\n            border: \"none\",\n            color: \"black\"\n        },\n        filterEntry: {\n            border: \"1px solid gray\",\n            padding: \"3px\",\n            margin: \"30px 0px 10px\",\n            width: \"100%\"\n        }\n    };\n\n    updateQuery = (newQuery) => {\n        // Save the new query string in state and pass the string\n        this.setState({ query: newQuery });\n        this.props.filterLocations(newQuery);\n    }\n\n    render = () => {\n        return (\n            <div>\n                <Drawer open={this.props.open} onClose={this.props.toggleDrawer}>\n                    <div style={this.styles.list}>\n                        <input\n                            style={this.styles.filterEntry}\n                            type=\"text\"\n                            placeholder=\"Filter list\"\n                            name=\"filter\"\n                            aria-label=\"Search\"\n                            onChange={e => this\n                                .updateQuery(e.target.value)}\n                            value={this.state.query} />\n                        <ul style={this.styles.noBullets}>\n                            {this.props.locations && this\n                                .props\n                                .locations\n                                .map((location, index) => {\n                                    return (\n                                        <li style={this.styles.listItem} key={index}>\n                                            <button style={this.styles.listLink} key={index} onClick={e => this.props.clickListItem(index)}>{location.name}</button>\n                                        </li>\n                                    )\n                                })}\n                        </ul>\n                    </div>\n                </Drawer>\n            </div>\n        )\n    }\n}\n\nexport default ListItems;","import React, {Component} from 'react';\nimport './App.css';\nimport locations from './API/locations.json';\nimport MapDiv from './components/MapDiv';\nimport ListItems from './components/ListItems';\n\nclass App extends Component {\n  state = {\n    lat: 41.8781,\n    lon: -87.6298,\n    zoom: 15,\n    all: locations,\n    filtered: null,\n    open: false\n  }\n\n  styles = {\n    menuButton: {\n      marginLeft: 10,\n      marginRight: 20,\n      position: \"absolute\",\n      left: 10,\n      top: 23,\n      background: \"#f5f5f5\",\n      padding: 10\n    },\n    hide: {\n      display: 'none'\n    },\n    header: {\n      marginTop: \"0px\"\n    }\n  };\n\n  componentDidMount = () => {\n    this.setState({\n      ...this.state,\n      filtered: this.filterLocations(this.state.all, \"\")\n    });\n  }\n\n  toggleDrawer = () => {\n    // toggleDrawer function\n    this.setState({\n      open: !this.state.open\n    });\n  }\n\n  updateQuery = (query) => {\n    // Update the query value\n    this.setState({\n      ...this.state,\n      selectedIndex: null,\n      filtered: this.filterLocations(this.state.all, query)\n    });\n  }\n\n  filterLocations = (locations, query) => {\n    // Filter locations\n    return locations.filter(location => location.name.toLowerCase().includes(query.toLowerCase()));\n  }\n\n  clickListItem = (index) => {\n    this.setState({ selectedIndex: index, open: !this.state.open })\n  }\n\n  render = () => {\n    return (\n      <div  role=\"main\" className=\"App\">\n        <div>\n          <button onClick={this.toggleDrawer} style={this.styles.menuButton}>\n            <i className=\"fa fa-bars\"></i>\n          </button>\n          <h1>Near Me Restaurants in Chicago</h1>\n        </div>\n        <MapDiv\n          lat={this.state.lat}\n          lon={this.state.lon}\n          zoom={this.state.zoom}\n          locations={this.state.filtered}\n          selectedIndex={this.state.selectedIndex}\n          clickListItem={this.clickListItem}/>\n        <ListItems\n          locations={this.state.filtered}\n          open={this.state.open}\n          toggleDrawer={this.toggleDrawer}\n          filterLocations={this.updateQuery}\n          clickListItem={this.clickListItem}/>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}